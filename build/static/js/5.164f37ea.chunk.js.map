{"version":3,"sources":["Components/Chat/ChatMsg/ChatMsg.js","Components/Chat/Chat.js","Components/Users/User/User.js","Components/Users/Users.js","Container/Main/Main.js"],"names":["ChatMsg","text","fromUser","time","refSection","isSeen","userId","useSelector","state","user","uid","useInView","ref","inView","useState","isValid","setIsValid","useEffect","unsubscribe","db","collection","get","then","querySnapshot","forEach","doc","data","id_2","message","update","className","style","textAlign","borderRadius","backgroundColor","borderLeftColor","right","borderRightColor","left","toDate","getDate","getMonth","getFullYear","toLocaleTimeString","hour12","hour","minute","color","Chat","chat","userInfo","isScreenSmallSize","IsScreenSmallSize","openChatValue","openChat","dispatch","useDispatch","scrollElement","useRef","getUserTime","setgetUserTime","isOnline","setIsOnline","textAreaValue","setTextAreaValue","where","friendInfo","friendId","onSnapshot","error","alert","current","scrollIntoView","behavior","allMessages","subscribe","orderBy","allMessageFromServer","id_1","push","timeStamp","getAllMessages","zIndex","flexBasis","display","startChat","src","alt","loading","onClick","friendName","friendImage","map","el","Math","random","onSubmit","e","preventDefault","trim","add","firebase","firestore","FieldValue","serverTimestamp","catch","TextareaAutosize","aria-label","minRows","maxRows","placeholder","onChange","changeHandler","target","value","dir","type","User","image","name","clicked","id","setText","counter","setCounter","myId","cutText","length","slice","dotClass","allConversations","getAllNotSeenMsg","join","title","Users","allUsers","isThereUser","clickedHandler","flexShrink","padding","photoURL","Main","getWidth","window","innerWidth","document","documentElement","clientWidth","body","isSmallScreen","width","setWidth","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/5.164f37ea.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useSelector } from 'react-redux';\r\nimport { db } from '../../../firebase';\r\nimport './ChatMsg.css';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\n\r\n\r\nfunction ChatMsg({ text, fromUser, time, refSection, isSeen }) {\r\n    const userId = useSelector(state => state.user.user && state.user.user.uid);\r\n    const calcTime = () => time && `${time.toDate().getDate()}/${time.toDate().getMonth() + 1}/${time.toDate().getFullYear()} - ${time.toDate().toLocaleTimeString({}, { hour12: true, hour: 'numeric', minute: 'numeric' })}`;\r\n    const { ref, inView } = useInView();\r\n    const [isValid, setIsValid] = useState(isSeen);\r\n    \r\n    useEffect(() => {\r\n\r\n        function unsubscribe() {\r\n            inView && setIsValid(true);\r\n            db.collection('chat')\r\n            .get()\r\n            .then(querySnapshot => {\r\n                querySnapshot.forEach(doc => {\r\n                    if (\r\n                        (userId === doc.data().id_2) &&\r\n                        (doc.data().message === text) &&\r\n                        (doc.data().isSeen === isSeen)\r\n                    ) {\r\n                        inView && doc.ref.update({ isSeen: true });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        if (!isValid) {\r\n            unsubscribe();\r\n        }\r\n\r\n        return () => unsubscribe;\r\n    }, [inView]);\r\n\r\n    return (\r\n        <div ref={ref} className=\"chat_msg\" style={fromUser ? { textAlign: 'right' } : { textAlign: 'left' }}>\r\n            <div ref={refSection} className=\"msg\" style={fromUser ? { borderRadius: '15px 0px 15px 15px', backgroundColor: '#dcf8c6' } : { borderRadius: '0px 15px 15px', backgroundColor: '#fff' }} >\r\n                <div className=\"shap\" style={fromUser ? { borderLeftColor: '#dcf8c6', right: '-17px' } : { borderRightColor: '#fff', left: '-17px' }} />\r\n                <span className=\"text_msg\">{text}</span>\r\n                <div className=\"time\">\r\n                    <span className=\"show_time\">{calcTime()}</span>\r\n                    {fromUser && <span className=\"check_sign\">{<DoneAllIcon style={ isSeen ? {color: '#4fc3f7'} : {color: '#9AAD8A'}} />}</span>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMsg;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chat.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport ChatMsg from './ChatMsg/ChatMsg';\r\nimport { db } from '../../firebase';\r\nimport { openChat, getAllMessages } from '../../store/actions/chatActions';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const chat = useSelector(state => state.chat);\r\n    const userInfo = useSelector(state => state.user.user && state.user.user.uid);\r\n    const isScreenSmallSize = useSelector(state => state.chat.IsScreenSmallSize);\r\n    const openChatValue = useSelector(state => state.chat.openChat);\r\n    const dispatch = useDispatch();\r\n    const scrollElement = useRef();\r\n    const [getUserTime, setgetUserTime] = useState('');\r\n    const [isOnline, setIsOnline] = useState(false);\r\n    const [textAreaValue, setTextAreaValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection(\"users\")\r\n            .where('uid', '==', chat.friendInfo.friendId)\r\n            .onSnapshot((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    setIsOnline(doc.data().isOnline);\r\n                    doc.data().time && setgetUserTime(`${doc.data().time.toDate().getDate()}/${doc.data().time.toDate().getMonth() + 1}/${doc.data().time.toDate().getFullYear()} - ${doc.data().time.toDate().toLocaleTimeString({}, { hour12: true, hour: 'numeric', minute: 'numeric' })}`);\r\n                });\r\n            }, (error) => alert(error))\r\n        scrollElement.current && scrollElement.current.scrollIntoView({ behavior: 'smooth' })\r\n        return () => unsubscribe();\r\n    }, [chat.friendInfo.friendId]);\r\n\r\n    useEffect(() => {\r\n        scrollElement.current && scrollElement.current.scrollIntoView({ behavior: 'smooth' });\r\n    }, [chat.allMessages]);\r\n\r\n    useEffect(() => {\r\n        const subscribe = db.collection(\"chat\")\r\n            .where('id_1', 'in', [userInfo, chat.friendInfo.friendId])\r\n            .orderBy('timeStamp', 'asc')\r\n            .onSnapshot((querySnapshot) => {\r\n                let allMessageFromServer = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    if (\r\n                        (chat.friendInfo.friendId === doc.data().id_1 || chat.friendInfo.friendId === doc.data().id_2)\r\n                        &&\r\n                        (userInfo === doc.data().id_1 || userInfo === doc.data().id_2)\r\n                    ) {\r\n                        allMessageFromServer.push({\r\n                            message: doc.data().message,\r\n                            id_1: doc.data().id_1,\r\n                            time: doc.data().timeStamp,\r\n                            isSeen: doc.data().isSeen\r\n                        })\r\n                    }\r\n                });\r\n                dispatch(getAllMessages(allMessageFromServer))\r\n            }, (error) => alert(error))\r\n        return () => subscribe();\r\n    }, [chat.friendInfo.friendId]);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (textAreaValue.trim()) {\r\n            db.collection(\"chat\")\r\n                .add({\r\n                    id_1: userInfo,\r\n                    id_2: chat.friendInfo.friendId,\r\n                    message: textAreaValue,\r\n                    timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    isSeen: false\r\n                })\r\n                .catch((error) => alert(error.message))\r\n            setTextAreaValue('');\r\n        }\r\n    }\r\n\r\n    const changeHandler = (e) => setTextAreaValue(e);\r\n    const backToUsers = () => isScreenSmallSize && dispatch(openChat(false));\r\n\r\n    return (\r\n        <div className='chat' style={isScreenSmallSize ? openChatValue ? { zIndex: '5', flexBasis: '100%', display: 'block' } : { zIndex: '1', flexBasis: '0%', display: 'none' } : {display: 'block'} }>\r\n            {\r\n                !chat.startChat && (\r\n                    <div className=\"no_msg\">\r\n                        <div className=\"content\">\r\n                            <div className=\"no_msg_image\">\r\n                                <img src={process.env.PUBLIC_URL + 'start_msg.png'} alt=\"No Message\" loading='lazy' />\r\n                            </div>\r\n                            <div className=\"txt\">\r\n                                Start Chatting Now\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                chat.startChat && (\r\n                    <div className=\"message_section\">\r\n                        <div className=\"header\">\r\n                            <button className=\"left-arrow\" onClick={backToUsers}>{<KeyboardBackspaceIcon />}</button>\r\n                            <div className=\"user_info\">\r\n                                <div className=\"text\">\r\n                                    <h4>{chat.friendInfo.friendName}</h4>\r\n                                    <span>{isOnline ? 'Online' : getUserTime}</span>\r\n                                </div>\r\n                                <div className='image'>\r\n                                    <img src={chat.friendInfo.friendImage} alt={chat.friendInfo.friendName} loading='lazy' />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"message_content\" >\r\n                            {\r\n                                chat.allMessages.map(el => <ChatMsg key={el.id_1 + Math.random()} text={el.message} time={el.time} fromUser={el.id_1 === userInfo} refSection={scrollElement} isSeen={el.isSeen} />)\r\n                            }\r\n                        </div>\r\n                        <div className=\"send_msg\">\r\n                            <form onSubmit={submitHandler}>\r\n                                <div className=\"text-area\">\r\n                                    <TextareaAutosize aria-label=\"minimum height\" minRows={1} maxRows={3} placeholder=\"Type a message\" onChange={e => changeHandler(e.target.value)} value={textAreaValue} dir='auto' />\r\n                                </div>\r\n                                <button type=\"submit\" className=\"send_btn btn\">{<SendIcon />}</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { db } from '../../../firebase';\r\nimport './User.css';\r\n\r\nfunction User({ image, isOnline, name, clicked, id }) {\r\n\r\n    const [text, setText] = useState('');\r\n    const [counter, setCounter] = useState(0);\r\n    const myId = useSelector(state => state.user.user.uid);\r\n\r\n    const cutText = () => name.length > 16 ? `${name.slice(0, 16)}...`: name;\r\n    const longText = () => text && text.length > 0 && text[text.length - 1].length > 20 ? `${text[text.length - 1].slice(0, 20)}...`: text[text.length - 1];\r\n    const dotClass = ['dot', isOnline ? 'on' : 'off'];\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('chat')\r\n        .where('id_1', 'in', [myId, id])\r\n        .orderBy('timeStamp', 'asc')\r\n        .onSnapshot((querySnapshot) => {\r\n            let allConversations = [];\r\n            querySnapshot.forEach(doc => {\r\n                if(\r\n                    (myId === doc.data().id_1 || myId === doc.data().id_2) \r\n                    &&\r\n                    (id === doc.data().id_1 || id === doc.data().id_2) \r\n                ) {\r\n                    allConversations.push(doc.data().message);\r\n                }\r\n            })\r\n            setText(allConversations);\r\n        })\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const subscribe = db.collection('chat')\r\n        .where('id_2', 'in', [myId])\r\n        .onSnapshot((querySnapshot) => {\r\n            let getAllNotSeenMsg = [];\r\n            querySnapshot.forEach(doc => {\r\n                if(myId === doc.data().id_2 && id === doc.data().id_1 && doc.data().isSeen === false) {\r\n                    getAllNotSeenMsg.push(false);\r\n                }\r\n            })\r\n            setCounter(getAllNotSeenMsg.length);\r\n        })\r\n        return () => subscribe();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='user' onClick={() => clicked({id, name, image})} >\r\n            <div className=\"image\">\r\n                <img src={image} alt={name} loading='lazy' />\r\n                <span className={dotClass.join(' ')}></span>\r\n            </div>\r\n            <div className=\"text\" title={cutText()}>\r\n                <div className=\"header_count\">\r\n                    <h6><bdi>{cutText()}</bdi></h6>\r\n                    {counter > 0 && <div className=\"msg_counter\">{counter}</div>}\r\n                </div>\r\n                <p>{longText()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport './Users.css';\r\nimport User from './User/User';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { startChat, openChat } from '../../store/actions/chatActions';\r\n\r\nfunction Users() {\r\n    const dispatch = useDispatch();\r\n    const allUsers = useSelector(state => state.user.allUsers);\r\n    const isThereUser = useSelector(state => state.user.user);\r\n    const isScreenSmallSize = useSelector(state => state.chat.IsScreenSmallSize);\r\n    const openChatValue = useSelector(state => state.chat.openChat)\r\n\r\n    const clickedHandler = (id) => {\r\n        dispatch(startChat(id));\r\n        dispatch(openChat(true));\r\n    }\r\n\r\n    return (\r\n        <div className='users' style={isScreenSmallSize ? openChatValue ? {flexShrink: '0', padding: '0', flexBasis: '0%' } : { flexShrink: '0', flexBasis: '100%' } : null } >\r\n            {\r\n                isThereUser && \r\n                allUsers.length > 0 \r\n                ? allUsers.map(({ photoURL, isOnline, uid, name }) => <User key={uid} id={uid} image={photoURL} isOnline={isOnline} name={name} clicked={clickedHandler} />)\r\n                : <div className='no_users'>No Users...</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users\r\n","import React, { useEffect, useState } from 'react';\r\nimport Chat from '../../Components/Chat/Chat';\r\nimport Users from '../../Components/Users/Users';\r\nimport './Main.css';\r\nimport { isScreenSmallSize } from '../../store/actions/chatActions'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction Main() {\r\n\r\n    const getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n    const dispatch = useDispatch();\r\n    const isSmallScreen = useSelector(state => state.chat.IsScreenSmallSize);\r\n\r\n    let [width, setWidth] = useState(getWidth());\r\n    useEffect(() => {\r\n        let timeoutId = null;\r\n        const resizeListener = () => {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(() => setWidth(getWidth() < 570), 1000);\r\n        };\r\n        window.addEventListener('resize', resizeListener);\r\n        return () => {\r\n          window.removeEventListener('resize', resizeListener);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(isScreenSmallSize(width));\r\n    }, [width]);\r\n\r\n    return (\r\n        <div className='main' style={isSmallScreen ? { display: 'flex' } : null}>\r\n            <Users />\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n"],"sourceRoot":""}